version: 2.1

orbs:
  slack: circleci/slack@4.5.0
commands:
  notify-via-slack:
    steps:
      - run: echo "Slack notification"
      - slack/notify:
          event: 'pass'
          channel: 'cinema-circle-ci'
          template: ''
          custom: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "${CIRCLE_BRANCH} branch deployment to aws s3 and cloudfront is complete. üëç",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Project*:\n$CIRCLE_PROJECT_REPONAME"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch*:\n$CIRCLE_BRANCH"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*When*:\n$(date +'%m/%d/%Y %T')"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Build*:\n$CIRCLE_BUILD_NUM"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Author*:\n$CIRCLE_PROJECT_USERNAME"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Job"
                      },
                      "url": "${CIRCLE_BUILD_URL}"
                    }
                  ]
                }
              ]
            }
      - slack/notify:
          event: 'fail'
          channel: 'cinema-circle-ci'
          template: 'basic_fail_1'
executors:
  app-executor:
    docker:
      - image: cimg/node:14.15.5
    working_directory: ~/project
  slack-executor:
    docker:
      - image: 'cimg/base:stable'
    resource_class: small

aliases:
  - &show-current-branch-name
    run:
      name: Show Current Branch
      command: echo ${CURRENT_BRANCHewsdf}
  - &restore_cache
    restore_cache:
      keys:
        - app-{{ checksum "package.json" }}
        - app-
  - &install_dependencies
    run:
      name: Install Dependencies
      command: npm install
  - &save_cache
    save_cache:
      paths:
        - node_modules
      key: app-{{checksum "package.json"}}
  - &install_aws_cli
    run:
      name: Install AWS CLI
      working_directory: /
      command: |
        sudo apt-get -y -qq update
        sudo apt-get install awscli
  - &build_app
    run:
      name: Build project
      command: |
        npm install
        npm run build
        cd build
        zip ../build.zip -r * .[^.]*
        echo "Build succesful"

jobs:
  build:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore_cache
      - *install_dependencies
      - *save_cache
      - notify-via-slack

  linting:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore_cache
      - run:
          name: Run Linting
          command: npm run lint

  prettier:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore_cache
      - run:
          name: run prettier check
          command: npm run prettier:check
      - run:
          name: run prettier write
          command: npm run prettier:write

  deploy-to-aws-s3:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *install_aws_cli
      - *build_app
      - run:
          name: Deploy to AWS S3
          command: |
            if [ "${CIRCLE_BRANCH}" == "main" ]
            then
             aws --region ${AWS_REGION} s3 sync ~/project/build s3://${AWS_PROD_BUCKET} --delete
            elif [ "${CIRCLE_BRANCH}" == "staging" ]
            then
             aws --region ${AWS_REGION} s3 sync ~/project/build s3://${AWS_STAGING_BUCKET} --delete
            elif [ "${CIRCLE_BRANCH}" == "develop" ]
            then
              aws --region ${AWS_REGION} s3 sync ~/project/build s3://${AWS_DEV_BUCKET} --delete
            fi
  deploy-to-aws-cloudfront:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - run:
          name: Install AWS CLI
          working_directory: /
          command: |
            sudo apt-get -y -qq update
            sudo apt-get install awscli
      - *build_app
      - run:
          name: Deploy to AWS Cloudfront
          command: |
            aws configure set preview.cloudfront true
            if [ "${CIRCLE_BRANCH}" == "main" ]
            then
             aws cloudfront create-invalidation --distribution-id ${PROD_DISTRIBUTION_ID} --paths "/*"
            elif [ "${CIRCLE_BRANCH}" == "staging" ]
            then
              aws cloudfront create-invalidation --distribution-id ${STAGING_DISTRIBUTION_ID} --paths "/*"
            elif [ "${CIRCLE_BRANCH}" == "develop" ]
            then
              aws cloudfront create-invalidation --distribution-id ${DEV_DISTIBUTION_ID} --paths "/*"
            fi
      - notify-via-slack

workflows:
  build_and_deploy:
    jobs:
      - build

      - linting:
          requires:
            - build
          filters:
            branches:
              only:
                - main
                - staging
                - develop

      - prettier:
          requires:
            - build
          filters:
            branches:
              only:
                - main
                - staging
                - develop

      - deploy-to-aws-s3:
          requires:
            - linting
            - prettier
          filters:
            branches:
              only:
                - main
                - staging
                - develop

      - deploy-to-aws-cloudfront:
          requires:
            - deploy-to-aws-s3
          filters:
            branches:
              only:
                - main
                - staging
                - develop
